.section .data
    msgInicio:  .asciz  "Bem vindo ao Manipulador de Conjuntos Numericos\n"
    msgTamA:    .asciz  "Informe o tamanho desejado para o vetor A! \n"
    msgTamB:    .asciz  "Informe o tamanho desejado para o vetor B! \n"
    msgOpcao:   .asciz  "Digite o numero da opcao desejada. \n" 
    msgMenu:    .asciz  "1- Leitura dos Conjuntos\n2- Encontrar Uniao\n3-Encontrar Interseccao\n4-Encontrar Diferenca\n5-Encontrar Complemento\n6- Sair\n"
    msgAvisoMenu: .asciz "Erro! As opcoes 2 a 5 so podem ser acessadas depois da definicao dos vetores pela opcao 1!\n"   
    msgLeVetorA: .asciz  "Leitura do Vetor A, informe os valores.\n"
    msgLeVetorB: .asciz  "Leitura do Vetor B, informe os valores.\n"
    mostraVetorA: .asciz "Vetor A lido:\n"
    mostraVetorB: .asciz "Vetor B lido:\n"
    pedeNum:    .asciz  "Entre com o numero %d\n"
    tipoIn:     .asciz  "%d"
    tipoOut:    .asciz  " %d"
    pulaLinha:  .asciz  "\n"
    
    num:    .int    0
    vetorA: .space  4
    vetorB: .space  4
    tamA:   .int    0
    tamB:   .int    0
.section .text

.globl  _start

_start:
    call    _abertura
    call    _leitura 
    call    _saida

_abertura:
    pushl   $msgInicio
    call    printf
    addl    $4, %esp  

    ret  

_menu:
    call _leitura
    call _uniao
    call _interseccao
    call _diferenca
    call _complemento
    call _saida


_leitura:
    call    _leTamA
    call    _leTamB

    call    _alocarVetorA
    call    _alocarVetorB

    call    _leVetorA
    call    _leVetorB

    call    _mostraVetorA
    call    _mostraVetorB

    ret

_leTamA:
    pushl   $msgTamA
    call    printf
    pushl   $tamA
    pushl   $tipoIn
    call    scanf
    addl    $12, %esp
    
    ret

_leTamB:
    pushl   $msgTamB
    call    printf
    pushl   $tamB
    pushl   $tipoIn
    call    scanf
    addl    $12, %esp

    ret

_alocarVetorA:
    movl    tamA, %eax
    movl    $4, %ebx
    mull    %ebx
    pushl   %eax
    call    malloc
    movl    %eax, vetorA
    addl    $4, %esp

    ret 

_alocarVetorB:
    movl    tamB, %eax
    movl    $4, %ebx
    mull    %ebx
    pushl   %eax
    call    malloc
    movl    %eax, vetorB
    addl    $4, %esp

    ret

_leVetorA:
    pushl $msgLeVetorB
    call printf
    addl $8, %esp
    movl vetorA, %edi
    movl tamA, %ecx 
    movl $1, %ebx
    call _leVet

    ret

_leVetorB:
    pushl   $msgLeVetorB
    call    printf
    addl    $8, %esp
    movl    vetorB, %edi
    movl    tamB, %ecx 
    movl    $1, %ebx
    call    _leVet

    ret

_leVet:
    pushl   %ecx
    pushl   %edi
    pushl   %ebx
    pushl   $pedeNum
    call    printf
    addl    $4, %esp



    pushl   $num
    pushl   $tipoIn
    call    scanf
    addl    $8, %esp

    popl    %ebx
    popl    %edi
    popl    %ecx

    movl    num, %edx
    movl    %edx, (%edi)
    addl    $4, %edi
    incl    %ebx

    loop _leVet 

    ret

_mostraVetorA:
    pushl   $mostraVetorA
    call    printf
    movl    vetorA, %edi
    movl    tamA, %ecx
    addl    $8, %esp
    call    _mostraVet

    pushl   $pulaLinha
    call    printf
    addl    $4, %esp

    ret


_mostraVetorB:
    pushl   $mostraVetorB
    call    printf
    movl    vetorB, %edi
    movl    tamB, %ecx
    addl    $8, %esp
    call    _mostraVet

    pushl   $pulaLinha
    call    printf
    addl    $4, %esp

    ret

_mostraVet:
    pushl   %edi
    pushl   %ecx
    movl    (%edi), %eax
    pushl   %eax
    pushl   $tipoOut
    call    printf
    
    addl    $8, %esp
    popl    %edi
    popl    %ecx
    addl    $4, %edi


    loop _mostraVet


    ret

_saida:
    pushl   $0
    call    exit 



_copiaVetorA:
    movl    vetorC, %edi
    movl    vetorA, %esi
    movl    tamA, %ebx

_adicionaA:
    pushl   %ebx
    movl    (%esi), %eax
    movl    %eax, %edi
    addl    $4, %edi
    addl    $4, %esi
    popl    %ebx    
    decl    %ebx
    movl    $0, %eax
    cmpl    %ebx, %eax
    jne     _adicionaA

    movl    tamB, %ebx
    movl    vetorB, %esi

_adicionaB:

    pushl   %ebx
    movl    (%esi), %eax
    movl    %eax, %edi
    addl    $4, %edi
    addl    $4, %esi
    popl    %ebx    
    decl    %ebx
    movl    $0, %eax
    cmpl    %ebx, %eax
    jne     _adicionaB
    ret

